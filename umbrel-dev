#!/usr/bin/env bash
set -euo pipefail

show_help() {
  cat << EOF
umbrel-dev 0.0.0

Automatically initialize and manage an Umbrel development environment.

Usage: umbrel-dev <command> [options]

Commands:
    help                    Show this help message
    init                    Initialize an Umbrel development environment in the working directory
    boot                    Boot the development VM
    halt                    Halt the development VM
    destroy                 Destroy the development VM
    rebuild <container>     Rebuild a container
    logs                    Stream Umbrel logs
    run <command>           Run a command inside the development VM
    ssh                     Get an SSH session inside the development VM
EOF
}

# Check required dependencies are installed
# If not, fail with instructions on how to fix
check_dependencies() {
  # TODO: Only warn about gnu-sed on macos and properly handle both sed/gsed in $PATH
  for cmd in "gsed" "git" "vagrant" "vboxmanage"; do
    if ! command -v $cmd >/dev/null 2>&1; then
      echo "This script requires gnu-sed Git, VirtualBox and Vagrant to be installed."
      echo
      echo "You can install them with brew:"
      echo
      echo "  brew install gnu-sed git"
      echo "  brew cask install vagrant virtualbox"
      exit 1
    fi
  done
}

# Run a command inside the development VM
run() {
  vagrant ssh -c "cd /vagrant/getumbrel/umbrel && $1"
}

# Check deps before running any commands
check_dependencies

if [ -z ${1+x} ]; then
  command=""
else
  command="$1"
fi

# Initialize an Umbrel development environment in the working directory
if [[ "$command" = "init" ]]; then
  # List of tuples
  # docker_image github_repo
  repos=(
    "getumbrel/umbrel getumbrel/umbrel"
    "getumbrel/umbrel-dashboard getumbrel/dashboard"
  )

  echo "Cloning container repositories..."
  for ((i = 0; i < ${#repos[@]}; i++)); do
    repo="${repos[$i]}"
    github_repo="$(echo $repo | cut -d' ' -f1)"
    docker_repo="$(echo $repo | cut -d' ' -f2)"
    echo
    git clone "https://github.com/$github_repo.git" "$github_repo"
    echo
    if [[ "$github_repo" != "getumbrel/umbrel" ]]; then
      echo "Patching docker-compose.yml to build $github_repo container from source..."
      gsed -i "s#image: $docker_repo\:.*#build: \.\.\/\.\.\/$github_repo#g" getumbrel/umbrel/docker-compose.yml
    fi
  done

  echo "Your development environment is now setup"
  echo "You can boot your development VM with:"
  echo
  echo "  umbrel-dev boot"
  exit
fi

# Boot the development VM
if [[ "$command" = "boot" ]]; then
  vagrant up
  exit
fi

# Halt the development VM
if [[ "$command" = "halt" ]]; then
  vagrant halt
  exit
fi

# Destroy the development VM
if [[ "$command" = "destroy" ]]; then
  vagrant destroy
  exit
fi

# TODO: Rebuild all or a specific container
if [[ "$command" = "rebuild" ]]; then
  if [ -z ${2+x} ]; then
    echo "A second argument is required!"
    exit 1
  fi
  container="$2"
  run "                                 \
       docker-compose build $container  \
    && docker-compose stop $container   \
    && docker-compose rm -f $container  \
    && docker-compose up -d $container"
  exit
fi

# Stream Umbrel logs
if [[ "$command" = "logs" ]]; then
  run "docker-compose logs -f"
  exit
fi

# Run a command inside the development VM
if [[ "$command" = "run" ]]; then
  if [ -z ${2+x} ]; then
    echo "A second argument is required!"
    exit 1
  fi
  run "$2"
  exit
fi

# Get an SSH session inside the development VM
if [[ "$command" = "ssh" ]]; then
  run bash
  exit
fi

# If we get here it means no valid command was supplied
# Show help and exit
show_help
exit 1
