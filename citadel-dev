#!/usr/bin/env bash
set -euo pipefail

show_help() {
  cat << EOF
citadel-dev 1.2.1

Automatically initialize and manage an Citadel development environment.

Usage: citadel-dev <command> [options]

Commands:
    help                    Show this help message
    init [options]          Initialize an Citadel development environment in the working directory
    boot [options]          Boot the development VM
    shutdown                Shutdown the development VM
    destroy                 Destroy the development VM
    containers              List container services
    rebuild <container>     Rebuild a container service
    reload                  Reloads the Citadel service
    app <command> [options] Manages apps installations
    logs                    Stream Citadel logs
    run <command>           Run a command inside the development VM
    ssh                     Get an SSH session inside the development VM
    bitcoin-cli <command>   Run bitcoin-cli with arguments
    lncli <command>         Run lncli with arguments
    auto-mine <seconds>     Generate a block continuously
EOF
}

# Get gnu sed
gnused=sed
if [[ "$(uname)" == "Darwin" ]]; then
  if ! command -v gsed >/dev/null 2>&1; then
    echo "Error: This script requires gnu-sed!"
    echo "Install it with:"
    echo "  brew install gnu-sed"
    exit 1
  fi
  gnused=gsed
fi

# Check required dependencies are installed
# If not, fail with instructions on how to fix
check_dependencies() {
  for cmd in "git" "vagrant"; do
    if ! command -v $cmd >/dev/null 2>&1; then
      echo "This script requires Git and Vagrant to be installed."
      echo
      echo "See:"
      echo
      echo "  https://git-scm.com/downloads"
      echo "  https://www.vagrantup.com/downloads.html"
      exit 1
    fi
  done
}

# Run a command inside the development VM
run_in_vm() {
  vagrant ssh -c "cd /vagrant/runcitadel/core && $1"
}

# Get script location and correctly handle any symlinks
get_script_location() {
  source="${BASH_SOURCE[0]}"
  # Resolve $source until the file is no longer a symlink
  while [ -h "$source" ]; do
    dir="$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)"
    source="$(readlink "$source")"
    # If $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    [[ $source != /* ]] && source="$dir/$source"
  done
  dir="$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)"
  echo $dir
}

check_citadel_dev_environment() {
  filename=".citadel-dev"
  dir=$PWD
  while [ ! -e "$dir/$filename" ]; do
    dir=${dir%/*}
    if [[ "$dir" = "" ]]; then
      echo "Error: This doesn't seem to be an citadel-dev environment."
      exit 1
    fi
  done
}

# Check deps before running any commands
check_dependencies

if [ -z ${1+x} ]; then
  command=""
else
  command="$1"
fi

# Initialize an Citadel development environment in the working directory
if [[ "$command" = "init" ]]; then
  if [[ "$(ls -A)" ]]; then
    echo "Working directory must be empty!"
    exit 1
  fi

  shift

  branch=""
  ssh=false

  # parse arguments
  for arg in "$@"
  do
    case "$1" in
      -b|--branch)
        branch=$2
        shift 1
        ;;
      -s|--ssh)
        ssh=true
        shift 1
        ;;
      *)
        shift 1
        ;;
    esac
  done

  echo "Creating Vagrantfile..."
  cp "$(get_script_location)/Vagrantfile" .

  # echo
  # vagrant plugin install --local vagrant-vbguest --plugin-version=0.24.0

  echo
  echo "Cloning container repositories..."
  repos="runcitadel/core runcitadel/dashboard runcitadel/manager runcitadel/middleware runcitadel/sdk runcitadel/ui"
  for repo in $repos; do
    echo

    if $ssh; then
      url="git@github.com:$repo.git"
    else
      url="https://github.com/$repo.git"
    fi

    # TEMP: remove "branch" logic after merge
    if [ -n "$branch" ] && [[ "$repo" != "runcitadel/sdk" ]]; then
      git clone -b "$branch" "$url" "$repo"
    else
      git clone "$url" "$repo"
    fi

    if [[ "$repo" == "runcitadel/core" ]]; then
      echo
      echo "Adding Docker Compose overrides to $repo..."
      cp "$(get_script_location)/docker-compose.override.yml" "$repo/"
    fi
  done

  touch .citadel-dev

  echo
  echo "Your development environment is now setup"
  echo "You can boot your development VM with:"
  echo
  echo "  citadel-dev boot"
  exit
fi

# Boot the development VM
if [[ "$command" = "boot" ]]; then
  check_citadel_dev_environment
  shift

  # default values
  network="regtest"

  # parse arguments
  for arg in "$@"
  do
    case "$arg" in
      -n|--network)
          case $2 in
           "mainnet"|"testnet"|"signet"|"regtest")
              network=$2
              shift 1
              ;;
            *)
              echo "Not a valid value for network"
              exit 1
          esac
          ;;
      *)
        shift 1
        ;;
    esac
  done

  echo "Booting with network set to: $network"
  VAGRANT_LOG=info NETWORK=$network vagrant up
  exit
fi

# Shutdown the development VM
if [[ "$command" = "shutdown" ]]; then
  check_citadel_dev_environment
  vagrant halt
  exit
fi

# Destroy the development VM
if [[ "$command" = "destroy" ]]; then
  check_citadel_dev_environment
  echo "Warning: This will completely remove the VM meaning it needs to be recreated on next boot."
  echo "If you just want to stop the VM run: citadel-dev shutdown"
  vagrant destroy
  exit
fi

# List container services
if [[ "$command" = "containers" ]]; then
  check_citadel_dev_environment
  run_in_vm "docker compose config --services"
  exit
fi

# Rebuild a container service
if [[ "$command" = "rebuild" ]]; then
  check_citadel_dev_environment
  if [ -z ${2+x} ]; then
    echo "A second argument is required!"
    exit 1
  fi
  container="$2"
  run_in_vm "                           \
       docker compose build $container  \
    && docker compose stop $container   \
    && docker compose rm -f $container  \
    && DEVICE_HOSTS=http://citadel-dev.local docker compose up -d $container"
  exit
fi

# Rebuild a container service
if [[ "$command" = "reload" ]]; then
  check_citadel_dev_environment
  echo "Reloading the Citadel service..."
  echo
  run_in_vm "                  \
       sudo scripts/stop       \
    && sudo scripts/configure  \
    && sudo scripts/start"
  exit
fi

# Rebuild a container service
if [[ "$command" = "app" ]]; then
  check_citadel_dev_environment
  if [ -z ${2+x} ]; then
    args=""
  else
    args="${@:2}"
  fi
  run_in_vm "scripts/app ${args}"
  exit
fi

# Stream Citadel logs
if [[ "$command" = "logs" ]]; then
  check_citadel_dev_environment
  while true; do
    run_in_vm "docker compose logs -f" || {
      echo "$(date +"%T") Trying again in 1 second..."
    }
    sleep 1
  done
  exit
fi

# Run a command inside the development VM
if [[ "$command" = "run" ]]; then
  check_citadel_dev_environment
  if [ -z ${2+x} ]; then
    echo "A second argument is required!"
    exit 1
  fi
  run_in_vm "$2"
  exit
fi

# Run bitcoin-cli with arguments
if [[ "$command" = "bitcoin-cli" ]]; then
  check_citadel_dev_environment
  if [ -z ${2+x} ]; then
    args=""
  else
    args="${@:2}"
  fi
  run_in_vm "docker exec -it bitcoin bitcoin-cli ${args}"
  exit
fi

# Run lncli with arguments
if [[ "$command" = "lncli" ]]; then
  check_citadel_dev_environment
  if [ -z ${2+x} ]; then
    args=""
  else
    args="${@:2}"
  fi
  run_in_vm "docker exec -it lnd lncli ${args}"
  exit
fi

# Generate a block continuously
if [[ "$command" = "auto-mine" ]]; then
  check_citadel_dev_environment
  if [ -z ${2+x} ]; then
    echo "Missing argument: Specify an interval in seconds"
    exit 1
  fi
  echo "Generating a block every $2 seconds. Press [CTRL+C] to stop..."
  run_in_vm "while true; do docker exec -it bitcoin bitcoin-cli -generate 1; sleep $2; done"
  exit
fi

# Get an SSH session inside the development VM
if [[ "$command" = "ssh" ]]; then
  check_citadel_dev_environment
  run_in_vm bash
  exit
fi

# If we get here it means no valid command was supplied
# Show help and exit
show_help
exit 1
